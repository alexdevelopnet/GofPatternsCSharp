using System;
using System.Collections.Generic;

namespace Estruturais.Flyweight
{
    // Flyweight - Interface para vers√≠culos b√≠blicos
    public interface IVersiculo
    {
        void MostrarVersiculo(string contexto, string aplicacao);
    }

    // ConcreteFlyweight - Vers√≠culo espec√≠fico (estado intr√≠nseco)
    public class VersiculoBiblico : IVersiculo
    {
        private readonly string _texto;
        private readonly string _referencia;
        private readonly string _tema;

        public VersiculoBiblico(string texto, string referencia, string tema)
        {
            _texto = texto;
            _referencia = referencia;
            _tema = tema;
            Console.WriteLine($"üìñ Criando vers√≠culo flyweight: {_referencia}");
        }

        public void MostrarVersiculo(string contexto, string aplicacao)
        {
            Console.WriteLine($"üìú {_referencia} ({_tema})");
            Console.WriteLine($"   \"{_texto}\"");
            Console.WriteLine($"   Contexto: {contexto}");
            Console.WriteLine($"   Aplica√ß√£o: {aplicacao}");
            Console.WriteLine();
        }

        public string GetReferencia() => _referencia;
        public string GetTema() => _tema;
    }

    // FlyweightFactory - Gerencia e reutiliza vers√≠culos
    public class FabricaVersiculos
    {
        private static readonly Dictionary<string, VersiculoBiblico> _versiculos = new Dictionary<string, VersiculoBiblico>();

        public static VersiculoBiblico GetVersiculo(string referencia)
        {
            if (!_versiculos.ContainsKey(referencia))
            {
                // Simulando um banco de vers√≠culos
                var dadosVersiculo = ObterDadosVersiculo(referencia);
                if (dadosVersiculo.HasValue)
                {
                    var dados = dadosVersiculo.Value;
                    _versiculos[referencia] = new VersiculoBiblico(
                        dados.Texto, 
                        dados.Referencia, 
                        dados.Tema);
                }
                else
                {
                    Console.WriteLine($"‚ùå Vers√≠culo {referencia} n√£o encontrado!");
                    return null!;
                }
            }
            else
            {
                Console.WriteLine($"‚ôªÔ∏è Reutilizando vers√≠culo flyweight: {referencia}");
            }

            return _versiculos[referencia];
        }

        public static int GetTotalVersiculosCriados()
        {
            return _versiculos.Count;
        }

        public static void MostrarEstatisticas()
        {
            Console.WriteLine($"üìä Total de vers√≠culos flyweight criados: {_versiculos.Count}");
            Console.WriteLine("üìã Vers√≠culos em mem√≥ria:");
            foreach (var versiculo in _versiculos.Values)
            {
                Console.WriteLine($"   - {versiculo.GetReferencia()} ({versiculo.GetTema()})");
            }
        }

        // Simula√ß√£o de banco de dados de vers√≠culos
        private static (string Texto, string Referencia, string Tema)? ObterDadosVersiculo(string referencia)
        {
            var bancoDados = new Dictionary<string, (string, string, string)>
            {
                ["Jo√£o 3:16"] = ("Porque Deus amou o mundo de tal maneira que deu o seu Filho unig√™nito, para que todo aquele que nele cr√™ n√£o pere√ßa, mas tenha a vida eterna.", "Jo√£o 3:16", "Salva√ß√£o"),
                ["Salmos 23:1"] = ("O Senhor √© o meu pastor, nada me faltar√°.", "Salmos 23:1", "Confian√ßa"),
                ["Filipenses 4:13"] = ("Posso todas as coisas em Cristo que me fortalece.", "Filipenses 4:13", "For√ßa"),
                ["Romanos 8:28"] = ("E sabemos que todas as coisas contribuem juntamente para o bem daqueles que amam a Deus.", "Romanos 8:28", "Provid√™ncia"),
                ["Jeremias 29:11"] = ("Porque eu bem sei os pensamentos que tenho a vosso respeito, diz o Senhor; pensamentos de paz, e n√£o de mal, para vos dar o fim que esperais.", "Jeremias 29:11", "Esperan√ßa"),
                ["Prov√©rbios 3:5-6"] = ("Confia no Senhor de todo o teu cora√ß√£o, e n√£o te estribes no teu pr√≥prio entendimento. Reconhece-o em todos os teus caminhos, e ele endireitar√° as tuas veredas.", "Prov√©rbios 3:5-6", "Confian√ßa"),
                ["1 Cor√≠ntios 13:4"] = ("O amor √© sofredor, √© benigno; o amor n√£o √© invejoso; o amor n√£o trata com leviandade, n√£o se ensoberbece.", "1 Cor√≠ntios 13:4", "Amor"),
                ["Mateus 28:19"] = ("Portanto ide, fazei disc√≠pulos de todas as na√ß√µes, batizando-os em nome do Pai, e do Filho, e do Esp√≠rito Santo.", "Mateus 28:19", "Miss√£o"),
                ["Ef√©sios 2:8"] = ("Porque pela gra√ßa sois salvos, por meio da f√©; e isto n√£o vem de v√≥s, √© dom de Deus.", "Ef√©sios 2:8", "Gra√ßa"),
                ["Isa√≠as 40:31"] = ("Mas os que esperam no Senhor renovar√£o as for√ßas, subir√£o com asas como √°guias; correr√£o, e n√£o se cansar√£o; caminhar√£o, e n√£o se fatigar√£o.", "Isa√≠as 40:31", "Renova√ß√£o")
            };

            return bancoDados.ContainsKey(referencia) ? bancoDados[referencia] : null;
        }
    }

    // Context - Representa o uso espec√≠fico de um vers√≠culo (estado extr√≠nseco)
    public class AplicacaoVersiculo
    {
        private VersiculoBiblico _versiculo;
        private string _contexto;
        private string _aplicacao;
        private string _pessoa;

        public AplicacaoVersiculo(string referencia, string contexto, string aplicacao, string pessoa)
        {
            _versiculo = FabricaVersiculos.GetVersiculo(referencia);
            _contexto = contexto;
            _aplicacao = aplicacao;
            _pessoa = pessoa;
        }

        public void Aplicar()
        {
            if (_versiculo != null)
            {
                Console.WriteLine($"üë§ {_pessoa} est√° aplicando:");
                _versiculo.MostrarVersiculo(_contexto, _aplicacao);
            }
        }
    }

    // Cliente que usa m√∫ltiplas aplica√ß√µes de vers√≠culos
    public class EstudoBiblico
    {
        private List<AplicacaoVersiculo> _aplicacoes = new List<AplicacaoVersiculo>();

        public void AdicionarAplicacao(string referencia, string contexto, string aplicacao, string pessoa)
        {
            _aplicacoes.Add(new AplicacaoVersiculo(referencia, contexto, aplicacao, pessoa));
        }

        public void RealizarEstudo()
        {
            Console.WriteLine("=== ESTUDO B√çBLICO EM GRUPO ===\n");
            foreach (var aplicacao in _aplicacoes)
            {
                aplicacao.Aplicar();
            }
        }
    }

    // Aplica√ß√£o de exemplo
    public class MinhaAppFlyweight
    {
        public static void Executar()
        {
            Console.WriteLine("=== PADR√ÉO FLYWEIGHT: Vers√≠culos B√≠blicos ===\n");

            Console.WriteLine("--- Demonstrando Reutiliza√ß√£o de Vers√≠culos ---\n");

            // Criando estudo b√≠blico
            var estudo = new EstudoBiblico();

            // M√∫ltiplas pessoas usando os mesmos vers√≠culos em contextos diferentes
            estudo.AdicionarAplicacao("Jo√£o 3:16", "Evangelismo", "Compartilhar o amor de Deus", "Pastor Jo√£o");
            estudo.AdicionarAplicacao("Jo√£o 3:16", "Aconselhamento", "Mostrar o amor incondicional de Deus", "Conselheira Maria");
            estudo.AdicionarAplicacao("Salmos 23:1", "Momento dif√≠cil", "Encontrar paz na tempestade", "Irm√£o Pedro");
            estudo.AdicionarAplicacao("Filipenses 4:13", "Desafio pessoal", "Ter for√ßa para superar obst√°culos", "Jovem Ana");
            estudo.AdicionarAplicacao("Salmos 23:1", "Ora√ß√£o matinal", "Come√ßar o dia confiando em Deus", "Irm√£ Sara");
            estudo.AdicionarAplicacao("Filipenses 4:13", "Testemunho", "Compartilhar vit√≥rias em Cristo", "Di√°cono Paulo");

            // Realizando o estudo
            estudo.RealizarEstudo();

            Console.WriteLine("--- Estat√≠sticas de Uso ---");
            FabricaVersiculos.MostrarEstatisticas();
            Console.WriteLine();

            Console.WriteLine("--- Demonstrando Efici√™ncia do Flyweight ---\n");

            // Simulando um aplicativo de vers√≠culos di√°rios
            Console.WriteLine("üì± APLICATIVO DE VERS√çCULOS DI√ÅRIOS\n");

            var aplicacoes = new List<AplicacaoVersiculo>();

            // 20 pessoas usando vers√≠culos (muitos repetidos)
            string[] pessoas = { "Jo√£o", "Maria", "Pedro", "Ana", "Paulo", "Sara", "Tiago", "Marta", "Lucas", "Priscila",
                               "Barnab√©", "L√≠dia", "Tim√≥teo", "D√©bora", "Silas", "Ester", "Davi", "Rute", "Samuel", "Raquel" };

            string[] referencias = { "Jo√£o 3:16", "Salmos 23:1", "Filipenses 4:13", "Romanos 8:28", "Jeremias 29:11" };
            string[] contextos = { "Devocional matinal", "Momento de ora√ß√£o", "Reflex√£o noturna", "Estudo pessoal", "Medita√ß√£o" };
            string[] aplicacoes_lista = { "Fortalecer a f√©", "Buscar dire√ß√£o", "Encontrar paz", "Crescer espiritualmente", "Adorar a Deus" };

            Random random = new Random();

            for (int i = 0; i < 50; i++) // 50 aplica√ß√µes de vers√≠culos
            {
                string pessoa = pessoas[random.Next(pessoas.Length)];
                string referencia = referencias[random.Next(referencias.Length)];
                string contexto = contextos[random.Next(contextos.Length)];
                string aplicacao = aplicacoes_lista[random.Next(aplicacoes_lista.Length)];

                aplicacoes.Add(new AplicacaoVersiculo(referencia, contexto, aplicacao, pessoa));
            }

            Console.WriteLine($"üìä Criadas {aplicacoes.Count} aplica√ß√µes de vers√≠culos");
            Console.WriteLine($"üìñ Apenas {FabricaVersiculos.GetTotalVersiculosCriados()} objetos vers√≠culo foram criados na mem√≥ria!");
            Console.WriteLine($"üíæ Economia de mem√≥ria: {aplicacoes.Count - FabricaVersiculos.GetTotalVersiculosCriados()} objetos poupados\n");

            Console.WriteLine("--- Exemplo de Aplica√ß√µes Criadas ---");
            for (int i = 0; i < 5; i++)
            {
                aplicacoes[i].Aplicar();
            }

            Console.WriteLine("üí° VANTAGENS DO FLYWEIGHT:");
            Console.WriteLine("- Reduz drasticamente o uso de mem√≥ria");
            Console.WriteLine("- Reutiliza objetos com estado intr√≠nseco comum");
            Console.WriteLine("- Separa estado intr√≠nseco (vers√≠culo) do extr√≠nseco (aplica√ß√£o)");
            Console.WriteLine("- Ideal para grandes quantidades de objetos similares");
        }
    }
}
